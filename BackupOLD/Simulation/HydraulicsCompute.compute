// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSInit
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture2D<float4> FlowPrevious;
RWTexture2D<float4> FlowCurrent;
RWTexture2D<float> WaterMap;

// Variables set from the CPU
float DeltaTime;
float TexSize;

float3 mod289(float3 x)
{
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float2 mod289(float2 x)
{
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float3 permute(float3 x)
{
	return mod289(((x*34.0) + 1.0)*x);
}

float snoise(float2 v)
{
	const float4 C = float4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
		0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
		-0.577350269189626, // -1.0 + 2.0 * C.x
		0.024390243902439); // 1.0 / 41.0

							// First corner
	float2 i = floor(v + dot(v, C.yy));
	float2 x0 = v - i + dot(i, C.xx);

	// Other corners
	float2 i1;
	//i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0
	//i1.y = 1.0 - i1.x;
	i1 = (x0.x > x0.y) ? float2(1.0, 0.0) : float2(0.0, 1.0);
	// x0 = x0 - 0.0 + 0.0 * C.xx ;
	// x1 = x0 - i1 + 1.0 * C.xx ;
	// x2 = x0 - 1.0 + 2.0 * C.xx ;
	float4 x12 = x0.xyxy + C.xxzz;
	x12.xy -= i1;

	// Permutations
	i = mod289(i); // Avoid truncation effects in permutation
	float3 p = permute(permute(i.y + float3(0.0, i1.y, 1.0)) + i.x + float3(0.0, i1.x, 1.0));

	float3 m = max(0.5 - float3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), 0.0);
	m = m * m;
	m = m * m;

	// Gradients: 41 points uniformly over a line, mapped onto a diamond.
	// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)
	float3 x = 2.0 * frac(p * C.www) - 1.0;
	float3 h = abs(x) - 0.5;
	float3 ox = floor(x + 0.5);
	float3 a0 = x - ox;

	// Normalise gradients implicitly by scaling m
	// Approximation of: m *= inversesqrt( a0*a0 + h*h );
	m *= 1.79284291400159 - 0.85373472095314 * (a0*a0 + h * h);

	// Compute final noise value at P
	float3 g;
	g.x = a0.x  * x0.x + h.x  * x0.y;
	g.yz = a0.yz * x12.xz + h.yz * x12.yw;

	return 130.0 * dot(m, g);
}

float circle(float2 position)
{
	float radius = 1;
	float2 dist = position - float2(100, 200);
	return 1. - smoothstep(radius - (radius*0.01),
		radius + (radius*0.01),
		dot(dist, dist)*4.0);
}

[numthreads(8, 8, 1)]
void CSInit(uint3 id : SV_DispatchThreadID)
{
	float r = snoise(id.xy); 
	//float r = circle(id.xy);
	//float r = step(0.0, id.x / 256.0) * step(0.0, id.y / 256.0);
	
	float alpha = 0.3;
	float3 rgb = float3(0.0, 0.0, 1.0);
	FlowCurrent[id.xy] = float4(rgb, alpha);
	//WaterMap[id.xy] = r;
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	float2 top = id.xy + uint2(0, 1);
	float2 left = id.xy + uint2(-1, 0);
	float2 right = id.xy + uint2(1, 0);
	float2 bottom = id.xy + uint2(0, -1);

	float flowT = (WaterMap[top] - WaterMap[id.xy]) / 2.0 * DeltaTime;
	float flowL = (WaterMap[left] - WaterMap[id.xy]) / 2.0 * DeltaTime;
	float flowR = (WaterMap[right] - WaterMap[id.xy]) / 2.0 * DeltaTime;
	float flowB = (WaterMap[bottom] - WaterMap[id.xy]) / 2.0 * DeltaTime;

	// From [-1, 1] to [0, 1]
	/*flowT = (flowT + 1.0) / 2.0;
	flowL = (flowL + 1.0) / 2.0;
	flowR = (flowR + 1.0) / 2.0;
	flowB = (flowB + 1.0) / 2.0;*/

	/*float pressure = height*density*gravity+0.5*density*velocity^2
	float friction = 0.995;
	flowcurrent = friction * flowPrevious + DeltaTime * ((pressure - pressureOther) / density * length);
	*/
	//float4 flow = /*FlowPrevious[id.xy] +*/ float4(flowT, flowL, flowR, flowB);
	//FlowCurrent[id.xy] = flow;

	float deltaHeight = flowT + flowL + flowR + flowB/*FlowPrevious[id.xy].r + * 2.0 - 1.0 +
						FlowPrevious[id.xy].g +* 2.0 - 1.0 + 
						FlowPrevious[id.xy].b +* 2.0 - 1.0 + 
						FlowPrevious[id.xy].a * 2.0 - 1.0 */;

	//WaterMap[id.xy] = (flowT + flowL + flowR + flowB + 1.0) / 2.0;

	//FlowCurrent[id.xy] = float4((flowT + 1.0) / 2.0, (flowL + 1.0) / 2.0, (flowR + 1.0) / 2.0, 0.0);

	WaterMap[id.xy] = WaterMap[id.xy] + deltaHeight;
}

